---
title:  Workflow for building APD
---

```{r}
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(rdflib)
source("R/convert_to_triples.R")
```

Load data and create triples
```{r}
annotation_properties_csv <- read_csv("data/APD_annotation_properties.csv", show_col_types = FALSE)
traits_csv <- read_csv("data/APD_traits.csv", show_col_types = FALSE) %>%
  mutate(Entity = paste0("https://w3id.org/APD/traits/", identifier))
glossary_csv <- read_csv("data/APD_glossary.csv", show_col_types = FALSE) %>%
  mutate(Entity = paste0("https://w3id.org/APD/glossary/", identifier))
published_classes_csv <- read_csv("data/published_classes.csv", show_col_types = FALSE)
reviewers_csv <- read_csv("data/APD_reviewers.csv", show_col_types = FALSE)
references_csv <- read_csv("data/APD_references.csv", show_col_types = FALSE)
units_csv <- read_csv("data/APD_units.csv", show_col_types = FALSE)
hierarchy_csv <- read_csv("data/APD_trait_hierarchy.csv", show_col_types = FALSE) %>%
  mutate(Entity = paste0("https://w3id.org/APD/traits/", identifier))
categorical_values_csv <- read_csv("data/APD_categorical_values.csv", show_col_types = FALSE) %>%
  mutate(Entity = paste0("https://w3id.org/APD/traits/", identifier))
APD_resource_csv <- read_csv("data/APD_resource.csv", show_col_types = FALSE)

triples_df_tmp <- 
  convert_to_triples(annotation_properties_csv, traits_csv, glossary_csv, published_classes_csv, reviewers_csv, references_csv, units_csv, hierarchy_csv, categorical_values_csv, APD_resource_csv)

triples_df <- triples_df_tmp$triples_df
triples_with_labels <- triples_df_tmp$triples_with_labels
```

Export various formats

```{r}
triples_with_labels %>%
  write_csv("APD.csv")

triples_df %>%
  write_delim("APD.nq", col_names=FALSE, escape="none", quote="none")

triples_df %>%
  select(-graph) %>%
  write_delim("APD.nt", col_names = FALSE, escape = "none", quote = "none")

# prove this parses correctly
true_triples <- read_nquads("APD.nq")

# serialize to any format
rdflib::rdf_serialize(true_triples, "APD.ttl",
                      namespace = c(APD = "https://w3id.org/APD/traits/",
                                    APD_glossary = "https://w3id.org/APD/glossary/",
                                    dc = "http://purl.org/dc/elements/1.1/",
                                    skos = "http://www.w3.org/2004/02/skos/core#",
                                    dwc = "http://rs.tdwg.org/dwc/terms/attributes/",
                                    dcam = "http://purl.org/dc/dcam/",
                                    dcterms = "http://purl.org/dc/terms/",
                                    ets = "http://terminologies.gfbio.org/terms/ETS/",
                                    obo = "http://purl.obolibrary.org/obo/",
                                    oboecore = "http://ecoinformatics.org/oboe/oboe.1.2/oboe-core.owl#",
                                    ont = "https://w3id.org/iadopt/ont/",
                                    owl = "http://www.w3.org/2002/07/owl#",
                                    rdfs = "http://www.w3.org/2000/01/rdf-schema#",
                                    uom = "https://w3id.org/uom/",
                                    datacite = "http://purl.org/datacite/v4.4/",
                                    xsd = "http://www.w3.org/2001/XMLSchema#",
                                    Cerrado = "http://cerrado.linkeddata.es/ecology/",
                                    CorVeg  = "http://linked.data.gov.au/def/corveg-cv/",
                                    DCM = "http://dicom.nema.org/resources/ontology/DCM/",
                                    EDAM = "http://edamontology.org/",
                                    EFO = "http://www.ebi.ac.uk/efo/",
                                    EnvThes = "http://vocabs.lter-europe.net/EnvThes/",
                                    hupson = "http://scai.fraunhofer.de/HuPSON#",
                                    IOBC = "http://purl.jp/bio/4/id/",
                                    MESH = "http://purl.bioontology.org/ontology/MESH/",
                                    odo = "http://purl.dataone.org/odo/",
                                    ORCID = "https://orcid.org/",
                                    SIO = "http://semanticscience.org/resource/",
                                    SWEET = "http://sweetontology.net/")
                                    )
rdflib::rdf_serialize(true_triples, "APD.json", format="jsonld")
```


# Smoke-tests / example sparql queries
```{r}
# how many unique predicates?
sparql <-
'SELECT DISTINCT ?p
 WHERE { ?s ?p ?c . }
'
rdf_query(true_triples, sparql)

# how many unique reviewers are in the data?
sparql <-
'SELECT DISTINCT ?orcid ?label
 WHERE { ?s <http://purl.org/datacite/v4.4/IsReviewedBy> ?orcid .
         ?orcid <http://www.w3.org/2000/01/rdf-schema#label> ?label
       }
'

unescape_unicode <- function(x) {
  stringi::stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1", x))
}

rdf_query(true_triples, sparql) %>%
  mutate(label = unescape_unicode(label))


# how many unique references are in the data?
sparql <-
  'SELECT DISTINCT ?id
 WHERE { ?s <http://purl.org/dc/terms/references> ?id .
       }
'
rdf_query(true_triples, sparql)


sparql <-
  'SELECT DISTINCT ?s
 WHERE { ?s <http://www.w3.org/2000/01/rdf-schema#label> "plant trait" .
       }
'
rdf_query(true_triples, sparql)
```

# Build docs

Build the website
```{r}
quarto::quarto_render()
```

Put a copy of latest in release folder:
```{r}
version <- rmarkdown::yaml_front_matter("index.qmd")$params$version

files <- c(list.files("docs", pattern = "APD"), "index.html")

for(p in c("release", "docs/release")) {
  to_path <- file.path(p, version)
  dir.create(to_path, FALSE, TRUE)
  purrr::walk(files, ~ file.copy(file.path("docs", .x), file.path(to_path, .x), overwrite = TRUE))
}
```




